package com.revature.daoimplemt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.revature.daos.OrderDAO;
import com.revature.models.Customer;
import com.revature.models.Order;
import com.revature.util.ConnectionUtil;

public class OrderDAOImpl implements OrderDAO {

	private static Logger log = LogManager.getLogger(CustomerDAOImpl.class);

	@Override
	public Order createOrder(Order order) {
		String sql = "insert into orders (customerUsername, menuId, flavor1Id, flavor2Id) values (?,?,?,?) returning id;";
		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);
			ps.setString(1, order.getCustomerUsername());
			ps.setInt(2, order.getItem_id());
			ps.setInt(3, order.getFlavor1_id());
			ps.setInt(4, order.getFlavor2_id());

			ResultSet rs = ps.executeQuery(); // return the id generated by the database
			if (rs.next()) {
				order.setId(rs.getInt("id"));
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return order;
	}

	@Override
	public Order retrieveOrderById(int id) {
		String sql = "select * from orders where id = ?;";
		Order order = null;

		try (Connection c = ConnectionUtil.getConnectionFromEnv();) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, id); // this refers to the 1st "?" in the sql string, allows to inject data

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				order = new Order();
				order.setId(rs.getInt("id"));
				order.setCustomerUsername(rs.getString("customerUsername"));
				order.setItem_id(rs.getInt("menuId"));
				order.setFlavor1_id(rs.getInt("flavor1Id"));
				order.setFlavor2_id(rs.getInt("flavor2Id"));

			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return order;
	}

	@Override
	public Order retrieveOrderByUsername(String username) {
		String sql = "select * from orders where username  = " + username + ";";
		Order order = null;

		try (Connection c = ConnectionUtil.getConnectionFromEnv();) {
			PreparedStatement ps = c.prepareStatement(sql);

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				order = new Order();
				order.setId(rs.getInt("id"));
				order.setCustomerUsername(rs.getString("customerUsername"));
				order.setItem_id(rs.getInt("menuId"));
				order.setFlavor1_id(rs.getInt("flavor1Id"));
				order.setFlavor2_id(rs.getInt("flavor2Id"));
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return order;
	}

	@Override
	public boolean updateOrder(Order order, int id) {
		String sql = "update orders set customerUsername = ?, menuId = ?, flavor1Id = ?, flavor2Id = ? where id = ?;";
		int rowsChanged = -1;

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setString(1, order.getCustomerUsername());
			ps.setInt(2, order.getItem_id());
			ps.setInt(3, order.getFlavor1_id());
			ps.setInt(4, order.getFlavor2_id());
			ps.setInt(5, order.getId());

			rowsChanged = ps.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (rowsChanged < 1) {
			return false;
		}
		return true;
	}

	@Override
	public void deleteOrderById(int id) {
		String sql = "DELETE FROM orders WHERE id = ?;";

		try (Connection c = ConnectionUtil.getConnectionFromEnv()) {
			PreparedStatement ps = c.prepareStatement(sql);

			ps.setInt(1, id);

			ResultSet rs = ps.executeQuery();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
